<apex:page title="Order" standardController="Order__c" extensions="Order_Controller" tabStyle="Order__c" sidebar="false" docType="html-5.0" standardStylesheets="false" showHeader="false">
    <head>
        <meta charset="utf-8" />
        <meta http-equiv="X-UA-Compatible" content="IE=edge" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <meta name="decription" content="" />
        <meta name="author" content="" />
        
        <script src='https://ajax.googleapis.com/ajax/libs/jquery/2.2.4/jquery.min.js'></script>        
        <script src="https://www.b-fonline.com/salesforceresources/SFA/js/fastclick/lib/fastclick.js"></script>
        
        <!--<apex:includeScript value="/lightning/lightning.out.js" />-->
        <apex:includeLightning />
        
        <link rel="stylesheet" href="https://www.b-fonline.com/salesforceresources/SFA/css/font-awesome.min.css" />
        <link rel="stylesheet" href="https://www.b-fonline.com/salesforceresources/SFA/css/accountSurvey.css" />
        <link rel="stylesheet" href="https://www.b-fonline.com/salesforceresources/BootstrapModernPages/css/bootstrap.min.css" />
        <link rel="stylesheet" href="https://www.b-fonline.com/salesforceresources/BootstrapModernPages/css/bootstrap-theme.min.css" />
        <link rel="stylesheet" href="https://www.b-fonline.com/salesforceresources/SLDS091/assets/styles/salesforce-lightning-design-system-ltng.min.css" />
        
        <!--<apex:includeScript value="{!URLFOR($Resource.SFA, '/js/fastclick/lib/fastclick.js')}" />-->

        <!--<link rel="stylesheet" href="//maxcdn.bootstrapcdn.com/font-awesome/4.3.0/css/font-awesome.min.css"/>-->
        <!--<apex:stylesheet value="{!URLFOR($Resource.SFA, '/css/accountSurvey.css')}" />-->
        <!--<apex:stylesheet value="{!URLFOR($Resource.bootstrapmodernp, '/startbootstrap-modern-business-gh-pages/css/bootstrap.min.css')}" />-->
        <!--<apex:stylesheet value="{!URLFOR($Resource.bootstrapmodernp, '/startbootstrap-modern-business-gh-pages/css/bootstrap-theme.min.css')}"/>-->
        <!--<apex:stylesheet value="{!URLFOR($Resource.SLDS091, '/assets/styles/salesforce-lightning-design-system-ltng.min.css')}" />-->
    </head>
    <style>
        .requiredField:after {
            content: '*';
            color: #c23934;  
            margin-left: 10px;
        }
        .overflow {
        	height: 200px;
        }
        .options-dropdown {
        float:right;
        margin-left: 5px !important;
        margin-right: 5px !important;
        display: none;
        }
        .options-dropdown-content {
        display: none;
        position: absolute;
        right: 5px;
        background-color: #f9f9f9;
        min-width: 160px;
        overflow: auto;
        box-shadow: 0px 8px 16px 0px rgba(0,0,0,0.2);
        z-index: 1;
        font-weight: normal;
        font-size: 75%;
        text-align: right;
        }
        .options-dropdown-content a {
        color: black;
        padding: 12px 16px;
        text-decoration: none;
        display: block;
        }
        .options-dropdown-content a:hover {
        background-color: #f1f1f1;
        text-decoration: none !important;
        }
        .options-show {
        display:block;
        }
        
    </style>
    <script src="{!urlPrefix}/soap/ajax/35.0/connection.js" type="text/javascript"></script>    
    <script>
    var isIOS = /iPad|iPhone|iPod/.test(navigator.userAgent) && !window.MSStream;
    var j$ = jQuery.noConflict();
    
    loading('load', true);
    
    // Initialise sforce connection object for MetadataApi calls
    sforce.connection.sessionId = '{!$Api.Session_ID}';
    var urlPrefix = '{!urlPrefix}';
    var recordTypeId = '{!recordTypeId}';
    var accountId = '{!accountId}';
    var accountName = "{!accountName}";
    var orderId = '{!orderId}';
    var callCardId = '{!callCardId}';
    var returnToId = '{!returnToId}';
    var marketName = "{!marketName}";
    
    var orderInfo = [{!serializedOrder}][0];
    console.log('orderinfo', orderInfo);
    var orderFS = [{!serializedOrderFS}][0];
    var readOnlyFields = [{!serializedReadOnlyFieldList}][0];
    var relationships = [{!serializedRelationshipList}][0];
    var isNewOrder = [{!isNewOrder}][0];
    var hasLineItems = [{!hasLineItems}][0];
    var lockOrder = [{!lockOrder}][0];
    var allowEditStatus = [{!allowEditStatus}][0];
    var orderType = '{!orderType}';
    var headerHTML = '';
    var filterHTML = '';
    var orderHeadersHTML = '';
    var orderBodyHTML = '';
    var returnURL = '{!$CurrentPage.Parameters.retURL}';
    var returnToAccountVisit ='{!$CurrentPage.Parameters.returnToAccountVisit}';
    var closeResultListLabelText = '{!$Label.CloseSearchResults}';
    var requiredFields = [];
    
    var redirect = false;
    var inSF1 = false;
    
    var picklistValuesMap = {};
    
    var inputTypeMap = {
        'boolean':  'checkbox',
        'double':   'number',
        'currency': 'number',
        'picklist': 'select',
        'reference':'link',
        'date':     'date',
        'percent':  'number',
        'textarea': 'text',
        'string':   'text'
    }
    
    j$(document).ready(function() {
        j$(function() {
            FastClick.attach(document.body);
        });
        
        if( (typeof sforce != 'undefined') && (sforce.one != null) ) {
            inSF1 = true;
        }else{
            inSF1 = false;
        }
        
        //get window width to determine whether or not to use tokenize, 768 = tablet
        //sniff user agent to figure out if it's an iPad because screen resolution varies
        var IS_IPAD = navigator.userAgent.match(/iPad/i) != null;
        if(j$(window).width() >= 992 && !IS_IPAD){
            deviceType = 'desktop';
        }else{
            j$('#expandButton').show();             //for cards layout
            if(j$(window).width() >= 768){
                deviceType = 'tablet';
            }else{
                deviceType = 'phone';
            }
        }
        
        generateOptionsMenu();
        
        j$.when(getPicklistValuesForRecordType('Order__c')).then(buildPage());
        j$('#clearForm').click(function() {
            j$('#clearFormModal').modal();
        });
        j$('#clearFormConfirm').click(function() {
            clearForm();
        });

        bindEvents(deviceType == 'desktop');

        if (lockOrder == true) {
            j$('.save').hide();
            j$('.saveAndClose').hide();
            j$('.processOrder').hide();
        }
        
        loading('load', false);                        
    });       
    
    function closePage() {  
        returnUrl = '/apex/Account_Visit?id='+accountId+'&view=order';
        if (inSF1) {
            if (returnToAccountVisit) {
                //sforce.one.back(false);
                sforce.one.navigateToURL(returnUrl, true);
            } else {
                if (isNewOrder) {
                    sforce.one.navigateToSObject(accountId);
                } else {
                    sforce.one.navigateToSObject(orderId);
                }
            }
        } else {
            if (returnToAccountVisit == '') {
                if (isNewOrder) {
                    window.location.href = '/' + accountId;
                } else {
                    window.location.href = '/' + orderId;
                }
            } else {
                window.location.href = returnUrl;
            }
        }
    }
    
    function bindEvents() {
        j$('.save').click(function() {
            if (j$(this).hasClass('saveAndClose')) {
                redirect = true;
            }
            //if (navigator.onLine) {
                j$('.save').button('loading');
                buildOrderToSave();
            //} else {
            //    j$('#offlineModal').modal();
            //}
        });
        
        j$('.cancel').click(function() {
            closePage();
        });
        
        if (isNewOrder == false) { 
            j$('.addItems').removeAttr('disabled'); 
            if ((marketName == 'Australia' || marketName == 'Czech Republic') && hasLineItems == true) {
                j$('.processOrder').removeAttr('disabled')
                                   .removeClass('hidden')
                                   .show();
            } else {
                j$('.processOrder').hide();
            }
        } else {
            j$('.processOrder').hide();
        }
        j$('.processOrder').click(function() {
            processOrder();
        });
        j$('.addItems').click(function() {
            j$(window).off('online')
                      .off('offline');
            try {
                var newUrl = '/apex/OrderItemsHTML?id='+orderId+'&retUrl='+returnToId+'&returnToAccountVisit='+returnToAccountVisit;
                if (inSF1) {
                    sforce.one.navigateToURL(newUrl, true);
                } else {
                    window.location.href = newUrl;
                }
            } catch(err) {
                console.log('error: ' + err.message);
            }
        });
    }
    function buildPage() {
        var accountNavUrl = '';
        if (inSF1) {
            accountNavUrl = 'javascript:sforce.one.navigateToSObject(\''+accountId+'\')';
        } else {
            accountNavUrl = urlPrefix + '\\' + accountId;
        }
        
        orderFS.sort(function(a, b) { return a.index > b.index ? 1 : -1 });
        j$.each(orderFS, function(key, value) {
            var thisSectionHTML = '<div id="' + value.name + '" class="section">';
            thisSectionHTML += '<div id="' + value.name + 'Header" class="header btn-info sf-font">' + value.title + '</div>';
            thisSectionHTML += '<div id="' + value.Name + 'headerDL" class="dl-horizontal headerDL left list-group row rowHeader">';
            
            if (value.index == 1) {
                thisSectionHTML += '<dt class="dtField" style="margin-bottom: 0.5rem;">{!$ObjectType.Account.Label}</dt><dd class="field"><a target="_blank" href="' + accountNavUrl + '">' + accountName + '</a></dd>';                    
            }
            
            var requiredHTML = '';
            j$.each(value.fields, function(key, value) {
                if (value.fieldPath.indexOf('__r') < 0) {
                    requiredHTML = '';
                    if (value.required || value.dbRequired) {
                        requiredHTML = ' requiredField';
                        requiredFields.push(value.fieldPath);
                    }
                    
                    thisSectionHTML += '<dt class="dtField' + requiredHTML + '">' + value.label + '</dt><dd class="ddField">' + buildInput(value, orderInfo, 'header') + '</dd>';
                }
            });
            
            thisSectionHTML += '</dl></div>';
            headerHTML += thisSectionHTML;
        });
        
        j$('div#sectionContent').append(headerHTML);
    }
        
    //build out the section header div for each section
    function buildSectionHeader(sectionInfo) {
        var html = '<div id="' + sectionInfo.name + '" class="section">';
        html += '<div id="' + sectionInfo.name + 'Header" class="header btn-info">' + sectionInfo.title + '</div>';
        html += '<dl id="' + sectionInfo.name + 'headerDL" class="dl-horizontal headerDL left list-group row"></dl>';
        html += '</div>';
        return html;
    }

    //build out the actual input tags for each type
    function buildInput(obj, section, prodId){
        var html = '';
        var value = eval('orderInfo.'+obj.fieldPath);
        var objectName = 'Order__c';
        
        if(value == undefined){
            value = '';
        }
        
        var isReadOnly = false;
        var pos = -1;
        if (readOnlyFields != null) {
            pos = readOnlyFields.indexOf(obj.fieldPath);            
        }
        if (pos >= 0 || lockOrder == true) {
            isReadOnly = true;
        }
        if (obj.fieldPath == 'Status__c' && marketName == 'Poland') {
            isReadOnly = !allowEditStatus;
        }
        
        console.log('fld: ' + obj.fieldPath + ', value: ' + value);
        //build the correct HTML input type, read only in Account Info section if not required on field set
        switch(inputTypeMap[obj.type]){                             
            case 'number':
                html += '<input id="'+obj.fieldPath+prodId+'" field="'+obj.fieldPath+'" type="'+inputTypeMap[obj.type]+'" step="any" value="'+value+'" class="fieldInput slds-input" ' + (isReadOnly ? 'disabled' : '') + ' />';
                break;
            case 'select':
                if(isReadOnly == true){
                    html += '<span style="margin-bottom: 0.5rem;">'+value+'</span>';
                }else{
                    html += '<select id="'+obj.fieldPath+'-'+prodId+'" field="'+obj.fieldPath+'" class="fieldInput slds-select  "><option value=""></option>';
                    var options = getSelectOptions(obj.fieldPath, objectName);
                    console.log('options: ', options);
                    for(var i=0;i<options.values.length;i++){
                        if(value == options.values[i]){
                            html+= '<option value="'+options.values[i]+'" selected>'+options.labels[i]+'</option>';
                        }else{
                            html+= '<option value="'+options.values[i]+'">'+options.labels[i]+'</option>';
                        }
                    }
                    html += '</select>';
                }
                break;
            case 'checkbox':
                if(isReadOnly == true){
                    html += '<input id="'+obj.fieldPath+'" field="'+obj.fieldPath+'" type="'+inputTypeMap[obj.type]+'" disabled="disabled" class="fieldInput cmn-toggle cmn-toggle-round-flat"/>';
                    html += '<label for="'+obj.fieldPath+'" class="'+section+'Checkbox"></label>';
                }else{
                    if(value == true){
                        html += '<input id="'+obj.fieldPath+prodId+'" field="'+obj.fieldPath+'" type="'+inputTypeMap[obj.type]+'" checked="checked" class="fieldInput cmn-toggle cmn-toggle-round-flat"/>';
                    }else{
                        html += '<input id="'+obj.fieldPath+prodId+'" field="'+obj.fieldPath+'" type="'+inputTypeMap[obj.type]+'" class="fieldInput btn cmn-toggle cmn-toggle-round-flat"/>';
                    }
                    html += '<label for="'+obj.fieldPath+prodId+'" class="'+section+'Checkbox"></label>';
                }                    
                break;
            case 'link':
                var relationshipName = obj.fieldPath.replace('__c', '__r');
                var thisValue = eval("orderInfo." + obj.fieldPath);
                var infoField = eval("orderInfo." + relationshipName);
                var relatedValue = '';
                var lookupField;
                for(var i = 0; i < relationships.length; i++) {
                    if (relationships[i].name == obj.fieldPath) {
                        lookupField = relationships[i];
                        break;
                    }
                }
                if (infoField != null && infoField != undefined) {
                    var nameFieldToUse = 'Name';
                    if (lookupField != null && lookupField != undefined) {
                        nameFieldToUse = lookupField.nameFieldToReturn;
                    }
                    relatedValue = infoField[nameFieldToUse];
                }
                console.log('relationshipName', relationshipName);
                console.log('thisvalue', thisValue);
                console.log('obj', obj);
                console.log('infofield', infoField);
                console.log('lookupfield', lookupField);
                if (lookupField) {   
                    html += '<div id="' + obj.fieldPath + '">';
                    
                    $Lightning.use("c:CustomLookup", function() {
                        $Lightning.createComponent(
                            "c:lookupComponent",
                            { searchString: relatedValue, recordId: thisValue, label:obj.fieldPath, pluralLabel: '', sObjectAPIName: lookupField.objectName, filterClause: lookupField.filter, listIconSVGPath:"/resource/SLDS091/assets/icons/standard-sprite/svg/symbols.svg#"+lookupField.svgClass, listIconClass:"slds-icon-standard-"+lookupField.svgClass, objectLabel: lookupField.objectLabel, closeResultListLabel:closeResultListLabelText, showCreateNewOption: false, nameField: lookupField.nameFieldToReturn, isReadOnly: isReadOnly},
                            obj.fieldPath,
                            function(cmp) {
                            }
                        );
                    });
                    
                }
                break;
            case 'date':
                html += '<input id="'+obj.fieldPath+prodId+'" field="'+obj.fieldPath+'" class="'+inputTypeMap[obj.type]+'Input slds-input-clone" type="'+inputTypeMap[obj.type]+'" value="'+value+'" ' + (isReadOnly ? 'disabled' : '') + ' />';
                break;
            default:
                if (obj.type == 'textarea') {
                    html += '<textarea id="'+obj.fieldPath+prodId+'" field="'+obj.fieldPath+'" type="'+inputTypeMap[obj.type]+'" value="'+value+'" class="fieldInput slds-textarea" row="4" ' + (isReadOnly ? 'disabled' : '') + '>'+value+'</textarea>';
                } else {
                    html += '<input id="'+obj.fieldPath+prodId+'" field="'+obj.fieldPath+'" type="'+inputTypeMap[obj.type]+'" value="'+value+'" class="fieldInput slds-input" ' + (isReadOnly ? 'disabled' : '') + '/>';
                }
        } 
        return html;               
    }

    //get all picklist values for this market's recordtype
    function getPicklistValuesForRecordType (objectName) {
        var bigString = [];
        var recordTypeName = '{!recordTypeName}';
        var recordTypeId = orderInfo.RecordTypeId;
        
        var vl = {};
        var recordTypeMappings = sforce.connection.describeLayout(objectName).recordTypeMappings;
        console.log('recordTypeName', recordTypeName);
        console.log('recordTypeId', recordTypeId);
        console.log('recordTypeMappings', recordTypeMappings);
        if(recordTypeMappings.length == undefined){
            for(var x=0; x<recordTypeMappings.picklistsForRecordType.length; x++){
                vl = returnPickListValue(recordTypeMappings.picklistsForRecordType[x]);
                var field = {
                    name: recordTypeMappings.picklistsForRecordType[x].picklistName,
                    values: vl.values,
                    labels: vl.labels
                };                           
                bigString.push(field);
            }
        }else{
            for (var i=0; i <recordTypeMappings.length; i++) {
                if (recordTypeMappings[i].recordTypeId == recordTypeId){
                    if (recordTypeMappings[i].picklistsForRecordType.length == undefined) {
                        vl = returnPickListValue(recordTypeMappings[i].picklistsForRecordType);
                        var field = {
                            name: recordTypeMappings[i].picklistsForRecordType.picklistName,
                            values: vl.values,
                            labels: vl.labels
                        };                          
                        bigString.push(field);
                    } else {
                        for(var x=0; x<recordTypeMappings[i].picklistsForRecordType.length; x++){
                            vl = returnPickListValue(recordTypeMappings[i].picklistsForRecordType[x]);
                            var field = {
                                name: recordTypeMappings[i].picklistsForRecordType[x].picklistName,
                                values: vl.values,
                                labels: vl.labels
                            };                          
                            bigString.push(field);
                        }
                    }
                }
            }
        }
        picklistValuesMap[objectName] = bigString;
    }
    
    //get the individual values
    function returnPickListValue (obj) {
        var values = [];
        var labels = [];
        if (obj.picklistValues) {
            if (obj.picklistValues.label == undefined) {
                for (var y=0; y <obj.picklistValues.length; y++) {
                    values.push(obj.picklistValues[y].value);
                    labels.push(obj.picklistValues[y].label);
                }
            } else {
                values.push(obj.picklistValues.value);
                labels.push(obj.picklistValues.label);
            }
        }
        return { values: values, labels: labels };
    }
    
    //find the picklist values for this field
    function getSelectOptions(fieldName, objectName){
        console.log('[getSelectOptions] fieldname', fieldName);
        console.log('[getSelectOptions] objectName', objectName);
        for(var i=0;i<picklistValuesMap[objectName].length;i++){
            if(picklistValuesMap[objectName][i].name == fieldName){
                return picklistValuesMap[objectName][i];
            }
        }
        return { values: [], labels: [] };
    }
    
    function processOrder() {
        j$('.actionButton').button('loading');
        var requiresApproval = false;
        if (marketName == 'Australia') {
            var tolerance = 0;
            var discount = 0;
            var bonusQty = 0;
            var bonusCarton = 0;
            var bonusUnit = 0;
            for (var i = 0; i < orderInfo.Order_Items__r.records.length; i++) {
                tolerance = 0;
                if (orderInfo.Order_Items__r.records[i].Max_PA_Per_Case__c) {                
                    tolerance = parseFloat(orderInfo.Order_Items__r.records[i].Max_PA_Per_Case__c);
                }
                discount = parseFloat(orderInfo.Order_Items__r.records[i].Discount__c == null ? 0 : orderInfo.Order_Items__r.records[i].Discount__c);
                bonusCarton = orderInfo.Order_Items__r.records[i].Carton_Bonus__c == null ? 0 : orderInfo.Order_Items__r.records[i].Carton_Bonus__c;
                bonusUnit = orderInfo.Order_Items__r.records[i].Unit_Bonus__c == null ? 0 : orderInfo.Order_Items__r.records[i].Unit_Bonus__c;
                console.log('bonusCarton: ' + bonusCarton + ', bonusUnit: ' + bonusUnit);
                bonusQty += parseFloat(bonusCarton) + parseFloat(bonusUnit);
                if (discount > tolerance || bonusQty > 0) {
                    requiresApproval = true;
                    break;
                }
            }
            console.log('bonusQty', bonusQty);
            console.log('requiresApproval', requiresApproval);
		}
        
        Order_Controller.processOrder(orderId, requiresApproval, function(result, event) {
            if (event.status) {
                itemsToDelete = [];
                j$('.actionButton').button('reset');
                loading(false);

                closePage();                
            } else {
                //handling errors.
                j$('.actionButton').button('reset');
                alert(event.message);
            }
        });
    }
    
    function buildOrderToSave() {
        loading('save', true);
        
        var order = {};
        if (!isNewOrder) {
            if (orderId == null) {
                orderId = orderInfo.Id;
            }
            order.Id = orderId;
            if (orderInfo.Status__c != undefined) {
                order.Status__c = orderInfo.Status__c;
            }
        } else {
            order.Id = null;
            order.Status__c = 'New';
            if (orderType == 'In-Direct' && marketName == 'Poland') {
                order.Status__c = 'Submitted';
            }
        }
        
        order.CallCard__c = callCardId;
        order.Account__c = orderInfo.Account__c;
        order.RecordTypeId = recordTypeId;
        order.Order_Type__c = orderType;
        j$('#sectionContent').find('input,select,textarea').each(function() {
            var fldName = j$(this).attr('field');
            if(j$(this).attr('field') != undefined) {
                if (j$(this).is(':checkbox')) {
                    order[fldName] = j$(this).is(':checked');
                } else if (j$(this).is('select')) {
                    order[fldName] = j$(this).val();
                } else if (j$(this).attr('type') == 'date') {
                    var formattedDate = new Date(j$(this).val()).getTime();
                    order[fldName] = isNaN(formattedDate) ? null : formattedDate;
                } else {
                    order[fldName] = j$(this).val();
                }
            }
        });
        console.log('[buildOrderToSave] order', order);
        for(var i = 0; i < relationships.length; i++) {
            var el = j$('#' + relationships[i].name).find('.' + relationships[i].name + '_lookupId');
            var val = el.html();
            if (val != undefined) {
                order[relationships[i].name] = val;
            }
        }
        if (order["Status__c"] == null || order["Status__c"] == '') { order["Status__c"] = 'New'; }  
        console.log('requiredfields', requiredFields);
        var errormessage = '';
        for(var i = 0; i < requiredFields.length; i++) {
            console.log('order.' + requiredFields[i],order[requiredFields[i]]);
            if (order[requiredFields[i]] == null || order[requiredFields[i]] == '') {
                errormessage += requiredFields[i] + ', ';
            }
        }
        console.log('[saveorder] order', order);
        if (errormessage.length > 0) {
            j$('.actionButton').button('reset');
            loading('save',false, 0);
            errormessage = errormessage.substr(0, errormessage.length - 2);
            errormessage = '<p style="font-weight:normal;font-size:small;">The following fields are required:\n</p><p style="font-size:smaller;font-weight:bold;">' + errormessage+'</p>';
            showMessage(errormessage);
        } else {
            j$('#pageMessages').empty();
            Order_Controller.saveOrder(JSON.stringify(order), function(result, event) {
                if (event.status) {
                    isNewOrder = false;
                    orderId = result.Id;
                    if (redirect == true) {
                        closePage();
                    } else {
                        returnToId = result.Id;
                        j$('.addItems').removeAttr('disabled')
                                       .show();
                        if ((marketName == 'Australia' || marketName == 'Czech Republic') && hasLineItems == true) {
                            j$('.processOrder').removeAttr('disabled')
                                               .removeClass('hidden')
                                               .show();
                        }
                    }
                } else {
                    alert(event.message);
                }
                
                j$('.save').button('reset');
                j$('.save').trigger('blur');
                
                loading('save', false);
                
            });
        }
    }
    
    function getQueryVariable(variable) {
        var query = window.location.search.substring(1);
        var vars = query.split('&');
        for (var i = 0; i < vars.length; i++) {
            var pair = vars[i].split('=');
            if(pair[0] == variable) { return pair[1]; }
        }
        
        return (false);
    }
    
    //toggle loading gif and saved message
    function loading(val, visible) {
        if (val == 'load') {
            if (visible) {
                j$("#loadingMessage").fadeIn(100).css("display","inline").css("visibility","visible");
            } else {
                j$("#loadingMessage").fadeOut();
            }
        } else if (val == 'save') {
            if (visible) {
                j$(".savedMessage").fadeIn(100).css("display","inline").css('visibility','visible');
            }
            else {
                j$(".savedMessage").fadeIn(100).css("display","inline").delay(3000).fadeOut();    
            }
        }
    }
                
    function clearForm(){
        j$('#content input,select').val('');
        j$('#content .lookup').html('');          
        j$('#content .btn-group').find('button').addClass('btn-default').removeClass('btn-primary');
        j$('#content input:checkbox').prop('checked',false);
        j$('.addItems').hide();
    }
    function showMessage(msg) {
        j$('#pageMessages').empty()
                           .append('<p>'+msg+'</p>');
    }
        // (Overflow/More) Options menu (top right corner)
        function showOptionsDropdown() {
        	document.getElementById("optionsMenuDropdown").classList.toggle("show");
        }
        // Close (Overflow/More) Options menu when not clicked on                              
        window.onclick = function(event) {
        	if (!event.target.matches('.optionMenuButton')) {
                var dropdowns = document.getElementsByClassName("options-dropdown-content");
                var i;
                for (i = 0; i < dropdowns.length; i++) {
                    var openDropdown = dropdowns[i];
                    if (openDropdown.classList.contains('show')) {
                        openDropdown.classList.remove('show');
                    }
                }
            }
        }
        
        // Generate (Overflow/More) Options menu based on JSON
        function generateOptionsMenu() {
            // Menu definition from Market Object
            var menu = {!serializedMenuJSON}
            // Show menu if menu definition has > 0 elements
            if(menu.length > 0)
                j$('#overflowmenu').show();
            
            // Add links to menu
            var menuDiv = j$("#optionsMenuDropdown");
            menu.forEach(function(element) {
                // Create base link element
                var a = document.createElement('a');
                var linkText = document.createTextNode(element.label);
                a.appendChild(linkText);
                // Add link if present (not advanced button) -- process link for sf1 detection and urlprefix
                if(element.link) {
                    // If link starts with http, paste straight in (external link), otherwise is Salesforce link and process
                    if(element.link.startsWith("http")) {
                        // Detect if in Salesforce1 or not
                        if(inSF1) {
                            a.href = 'javascript:sforce.one.navigateToURL("' + urlPrefix + element.link + '", ' + element.SF1isRedirect +')';
                        } else {
                            a.href = element.link;
                            a.setAttribute("target", element.target);
                        }
                    } else {
                        // Detect if in Salesforce1 or not
                        if(inSF1) {
                            a.href = 'javascript:sforce.one.navigateToURL("' + urlPrefix + element.link + '", ' + element.SF1isRedirect +')';
                        } else {
                            a.href = urlPrefix + element.link;
                            a.setAttribute("target", element.target);
                        }
                    }
                } else {
                    // Advaned button, define button behavior based on name
                    
                    // Accounts Nearby (This Account)
                    if(element.name == "Accounts_Nearby_This_Account") {
	                    // Detect if in Salesforce1 or not
                        if(inSF1) {
                            a.href = 'javascript:sforce.one.navigateToURL("' + urlPrefix + '/apex/AccountsNearby?id=' + accountId + '", ' + element.SF1isRedirect +')';
                        } else {
                            a.href = urlPrefix + '/apex/AccountsNearby?id=' + accountId;
                            a.setAttribute("target", element.target);
                        }
                    }
                }
                
                // Add to menu
                menuDiv.append(a);
            });
        }
    
    </script>
    
    <div class="bootstrap" style="height:100%">
        <div class="container-fluid theme-showcase" role="main">
            <div id="topButtonDiv" class="buttonDiv text-center">
                <button type="button" value="{!$Label.Save}" class="btn button save bg-primary actionButton" data-role="none" data-loading-text="{!$Label.Saving}">{!$Label.Save}</button>
                <button type="button" value="{!$Label.Save_and_Close}" class="btn button save saveAndClose bg-primary actionButton" data-role="none" data-loading-text="{!$Label.Saving}">{!$Label.Save_and_Close}</button>
                <button type="button" value="{!$Label.Cancel}" class="btn button cancel bg-primary actionButton" data-role="none">{!$Label.Cancel}</button>
                <button type="button" value="{!$Label.Process_Order}" class="btn button processOrder bg-primary actionButton hidden" data-role="none" disabled="disabled">{!$Label.Process_Order}</button>
                <button type="button" value="{!$Label.Add_Edit_Items}" class="btn button addItems bg-primary actionButton" data-role="none" disabled="disabled">{!$Label.Add_Edit_Items}</button>
                <div id="savedMessage" class="savedMessage" style="display:none">
                    {!$Label.Saved}
                    <apex:pagemessages id="messages"/>
                </div>
                <div id="loadingMessage" class="savedMessage" style="display:inline">
                    {!$Label.Loading}<img src="https://www.b-fonline.com/salesforceresources/SFA/img/transparentLoading.gif"/>
                    <apex:pageMessages id="loadingMessages"></apex:pageMessages>
                </div>
                <div class="options-dropdown" id='overflowmenu'>
                    <button id="optionMenuButton" type="button" class="btn-sm btn-flat btn-info optionMenuButton" onclick="showOptionsDropdown()">&#x22EE;</button>
                    <div id="optionsMenuDropdown" class="options-dropdown-content"></div>
                </div>
            </div>
            <div id="pageMessages" style="text-align:center;color:red;font-weight:bold;">
                
            </div>
            <div style="float:left;">
                <span class="requiredField" style="margin-left: 20px; margin-right: 10px;"></span><span style="font-size: x-small;font-weight:bold;">{!$Label.AsteriskDenotesRequireField}</span>
            </div>
            
            <div id="sectionContent" class="slds">
                
            </div>
            <div class="clear"></div>
            <div id="bottomButtonDiv" class="buttonDiv text-center">
                <button type="button" value="{!$Label.Save}" class="btn button save bg-primary actionButton" data-loading-text="{!$Label.Saving}">{!$Label.Save}</button>
                <button type="button" value="{!$Label.Save_and_Close}" class="btn button save saveAndClose bg-primary actionButton" data-loading-text="{!$Label.Saving}">{!$Label.Save_and_Close}</button>
                <button type="button" value="{!$Label.Cancel}" class="btn button cancel bg-primary actionButton">{!$Label.Cancel}</button>
                <button type="button" value="{!$Label.Process_Order}" class="btn button processOrder bg-primary actionButton hidden" data-role="none" disabled="disabled">{!$Label.Process_Order}</button>
                <button type="button" value="{!$Label.Add_Edit_Items}" class="btn button addItems bg-primary actionButton" data-role="none" disabled="disabled">{!$Label.Add_Edit_Items}</button>
                <div class="loadingImage" style="display:none">
                    <img src="https://www.b-fonline.com/salesforceresources/SFA/img/transparentLoading.gif"/>
                </div>
                <div class="savedMessage" style="display:none">
                    {!$Label.Saved}
                </div>
            </div>
            <div id="offlineModal" class="modal fade" role="dialog">
                <div class="modal-dialog">
                    <div class="modal-content">
                        <div class="modal-header">
                            <button type="button" class="close" data-dismiss="modal">&times;</button>
                            <h4 class="modal-title">{!$Label.No_Connection}</h4>
                        </div>
                        <div class="modal-body">
                            <p>{!$Label.Find_Connection}</p>
                        </div>
                        <div class="modal-footer">
                            <button type="button" class="btn btn-default" data-dismiss="modal">{!$Label.Close}</button>
                        </div>
                    </div>
                </div>
            </div>
            <div id="clearFormModal" class="modal fade" role="dialog">
                <div class="modal-dialog">
                    <div class="modal-content">
                        <div class="modal-header">
                            <button type="button" class="close" data-dismiss="modal">&times;</button>
                            <h4 class="modal-title">{!$Label.Clear_Form}</h4>
                        </div>
                        <div class="modal-body">
                            <p>{!$Label.Clear_Form_Confirm}</p>
                        </div>
                        <div class="modal-footer">
                            <button type="button" class="btn btn-default" data-dismiss="modal">{!$Label.Cancel}</button>
                            <button id="clearFormConfirm" type="button" value="{!$Label.Clear_Form}" class="btn button clearForm btn-danger" data-dismiss="modal" onclick="clearForm()" >{!$Label.Clear_Form}</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <!--<script src="{!URLFOR($Resource.bootstrapmodernp, '/startbootstrap-modern-business-gh-pages/js/bootstrap.min.js')}"></script>-->
    <script src="https://www.b-fonline.com/salesforceresources/BootstrapModernPages/js/bootstrap.min.js"></script>
    <script> 
        (function(){
            try{
                var a=navigator.userAgent; 
                if((a.indexOf('Salesforce')!=-1)&&(a.indexOf('iPhone')!=-1||a.indexOf('iPad')!=-1)&&(a.indexOf('Safari')==-1)){ 
                    var s=document.createElement('style'); 
                    s.innerHTML="html,html body{overflow: auto;-webkit-overflow-scrolling:touch;}body{position:absolute;left:0;right:0;top:0;bottom:0;}"; 
                    document.getElementsByTagName('head')[0].appendChild(s);
                }
            }catch(e){
            }
        })(); 
        window.onkeydown=function(){ window.focus(); }
    </script> 
    
</apex:page>